name: CI tests

# Reference: https://docs.github.com/en/actions/guides/creating-postgresql-service-containers
# jq, time, and aws are preinstalled in GitHub's ubuntu-20.04 runner

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  #schedule:
  #  - cron: '38 2 */3 * *'
  workflow_dispatch:

jobs:
  CI-tests-on-Ubuntu-runner:
    runs-on: ubuntu-20.04
    if: "!contains(github.event.head_commit.message, '[ci skip]') && !contains(github.event.head_commit.message, '[skip ci]')"
    env:
      PGHOST: localhost
      PGPORT: 5432
      PGUSER: postgres
      PGPASSWORD: password
      DB_NAME: opendrr

    services:
      postgis:
        image: postgis/postgis
        env:
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run psql to set up opendrr database
        if: ${{ github.event_name != 'schedule' }}
        run: |
          psql --version
          psql -c "CREATE DATABASE ${DB_NAME} OWNER ${PGUSER};"
          psql -d "$DB_NAME" -c 'CREATE SCHEMA boundaries;'
          psql -d "$DB_NAME" -c 'CREATE EXTENSION postgis;'
          psql -d "$DB_NAME" -c 'CREATE EXTENSION postgis_topology;'
          psql -d "$DB_NAME" -c 'CREATE EXTENSION fuzzystrmatch;'
          psql -d "$DB_NAME" -c 'CREATE EXTENSION postgis_tiger_geocoder;'

      - name: Install required Python 3 libraries
        run: |
          sudo eatmydata apt-get update
          sudo eatmydata apt-get install python3-elasticsearch python3-numpy python3-pandas python3-psycopg2 python3-sqlalchemy
          eatmydata pip3 install --user jenkspy

      - name: Set up python/config.ini
        if: ${{ github.event_name != 'schedule' }}
        env:
          MY_PAT: ${{ secrets.MY_PAT }}
        run: |
          cat <<EOF > python/config.ini
          [auth]
          github_token = $MY_PAT

          [rds]
          # PostGIS Connection Details
          postgres_host = localhost
          postgres_port = 5432
          postgres_un = postgres
          postgres_pw = password
          postgres_db = opendrr
          postgres_address = localhost:5432/opendrr

          [es]
          # Elasticsearch Connection Details
          es_un = elastic
          es_pw = changeme
          es_endpoint = elasticsearch-opendrr:9200
          kibana_endpoint = localhost:5601
          EOF
          chmod 600 python/config.ini

      - name: Remove the "wait" at the end of python/add_data.sh
        run: |
          sed -i '/tail -f \/dev\/null & wait/d' python/add_data.sh

      - name: Dry-run add_data.sh and see if it completes.
        if: ${{ github.event_name != 'schedule' }}
        run: |
          set -x
          sudo rm -rf /usr/src/app
          sudo mkdir /usr/src/app
          sudo chown $(id -un):$(id -gn) /usr/src/app
          cp -a python/* /usr/src/app

          set -a && source sample.env && set +a
          # Override sample variables
          export POSTGRES_HOST=localhost
          export ADD_DATA_DRY_RUN=true

          cd /usr/src/app
          stdbuf -oL ./add_data.sh

      - name: Run add_data.sh and see how far it goes?
        if: ${{ github.event_name != 'schedule' }}
        run: |
          set -x
          sudo rm -rf /usr/src/app
          sudo mkdir /usr/src/app
          sudo chown $(id -un):$(id -gn) /usr/src/app
          cp -a python/* /usr/src/app

          set -a && source sample.env && set +a
          # Override sample variables
          export POSTGRES_HOST=localhost

          cd /usr/src/app
          stdbuf -oL ./add_data.sh

  CI-tests-with-Docker-Compose:
    runs-on: ubuntu-20.04
    if: "!contains(github.event.head_commit.message, '[ci skip]') && !contains(github.event.head_commit.message, '[skip ci]')"

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up .env and python/config.ini
        if: ${{ github.event_name != 'schedule' }}
        env:
          MY_PAT: ${{ secrets.MY_PAT }}
        run: |
          cp sample.env .env
          cat <<EOF > python/config.ini
          [auth]
          github_token = $MY_PAT

          [rds]
          # PostGIS Connection Details
          postgres_host = db-opendrr
          postgres_port = 5432
          postgres_un = postgres
          postgres_pw = password
          postgres_db = opendrr
          postgres_address = db-opendrr:5432/opendrr

          [es]
          # Elasticsearch Connection Details
          es_un = elastic
          es_pw = changeme
          es_endpoint = elasticsearch-opendrr:9200
          kibana_endpoint = localhost:5601
          EOF
          chmod 600 python/config.ini

      - name: "Skipped: Install our own copy of Docker Engine"
        if: ${{ false }}
        run: |
          set -x

          docker version

          # See https://docs.docker.com/engine/install/ubuntu/
          sudo eatmydata apt-get remove docker docker-engine docker.io containerd runc

          sudo apt-get update
          sudo apt-get install \
            apt-transport-https \
            ca-certificates \
            curl \
            gnupg \
            lsb-release

          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

          echo \
            "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

          sudo apt-get update
          sudo apt-get install docker-ce docker-ce-cli containerd.io

          docker version

      - name: Install the new Docker Compose CLI
        run: |
          set -x
          type -a docker
          /usr/bin/docker version
          curl -L https://raw.githubusercontent.com/docker/compose-cli/main/scripts/install/install_linux.sh | sh
          type -a docker
          docker version
          /usr/local/bin/docker version

      - name: Run "docker compose up --build"
        run: |
          set -x
          ls -l /usr/local/bin/docker /usr/bin/docker
          type -a docker
          hash -r
          type -a docker
          DOCKER_BUILDKIT=1 stdbuf -oL docker compose up --build --profile elasticsearch
